{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "123done stack",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair for SSH access.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "StackName": {
      "Description": "Name for this Cloudformation stack.",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.small",
        "t2.medium"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "HostedZone": {
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone.",
      "Type": "String",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name."
    },
    "SSLCertificateName": {
      "Description": "Name of SSLCertificate to use with HostedZone.",
      "Type": "String",
      "ConstraintDescription": "must be a valid certificate stored in ACM."
    },
    "FQDNTrusted": {
      "Description": "Fully qualified domain name of this trusted instance (e.g., 123done...).",
      "Type": "String"
    },
    "FQDNUntrusted": {
      "Description": "Fully qualified domain name of this untrusted instance (e.g., 321done...).",
      "Type": "String"
    }
  },

  "Mappings": {
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-60b6c60a" },
      "us-west-2"      : { "AMI" : "ami-f0091d91" },
      "us-west-1"      : { "AMI" : "ami-d5ea86b5" },
      "eu-west-1"      : { "AMI" : "ami-bff32ccc" },
      "eu-central-1"   : { "AMI" : "ami-bc5b48d0" },
      "ap-southeast-1" : { "AMI" : "ami-c9b572aa" },
      "ap-northeast-1" : { "AMI" : "ami-383c1956" },
      "ap-southeast-2" : { "AMI" : "ami-48d38c2b" },
      "sa-east-1"      : { "AMI" : "ami-6817af04" }
    }
  },

  "Resources": {
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "EC2InstanceSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          {
            "Key" : "Name",
            "Value" : { "Ref": "StackName" }
          }
        ],
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] }
      }
    },
    "EC2InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to port 22, and 443 from ELB",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "EC2SecurityGroupIngress9000" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "EC2InstanceSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort": 9000,
        "ToPort": 9000,
        "SourceSecurityGroupName" : { "Ref" : "ELBSecurityGroup" }
      }
    },
    "EC2SecurityGroupIngress80" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "EC2InstanceSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort": 80,
        "ToPort": 80,
        "SourceSecurityGroupName" : { "Ref" : "ELBSecurityGroup" }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Fxa 123done ELB",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ELB":{
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties":{
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "ConnectionDrainingPolicy":{ "Enabled": true, "Timeout": 15 },
        "Listeners":[
          {
            "InstancePort": "9000",
            "LoadBalancerPort": "443",
            "Protocol": "HTTPS",
            "SSLCertificateId": { "Ref": "SSLCertificateName" }
          },
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:9000/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "10",
          "Interval": "15",
          "Timeout": "5"
        },
        "Instances": [ { "Ref": "EC2Instance" } ],
        "SecurityGroups": [ { "Fn::GetAtt": [ "ELBSecurityGroup", "GroupId" ] } ]
      }
    },
    "ELBDNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "ELB",
      "Properties": {
        "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "HostedZone" }, "." ] ] },
        "Comment": "DNS name of the trusted HTTPS ELB for the EC2 instance.",
        "Name": { "Ref": "FQDNTrusted" },
        "Type": "CNAME",
        "TTL": "60",
        "ResourceRecords": [ { "Fn::GetAtt": [ "ELB", "DNSName" ] } ]
      }
    },
    "ELBDNSRecordUntrusted": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "ELB",
      "Properties": {
        "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "HostedZone" }, "." ] ] },
        "Comment": "DNS name of the untrusted HTTPS ELB for the EC2 instance.",
        "Name": { "Ref": "FQDNUntrusted" },
        "Type": "CNAME",
        "TTL": "60",
        "ResourceRecords": [ { "Fn::GetAtt": [ "ELB", "DNSName" ] } ]
      }
    },
    "EC2DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "ELB",
      "Properties": {
        "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "HostedZone" }, "." ] ] },
        "Comment": "DNS name of the EC2 instance.",
        "Name": { "Fn::Join": [ "", [ "meta-", { "Ref": "FQDNTrusted" } ] ] },
        "Type": "CNAME",
        "TTL": "60",
        "ResourceRecords": [ { "Fn::GetAtt": [ "EC2Instance", "PublicDnsName" ] } ]
      }
    }
  },

  "Outputs": {
    "PublicDNS": {
      "Description": "Public ELB DNSName",
      "Value": { "Ref": "ELBDNSRecord" }
    },
    "EC2SSHAccess": {
      "Description": "SSH DNSName",
      "Value": { "Ref": "EC2DNSRecord" }
    },
    "EC2HostName": {
      "Description": "Hostname assigned by EC2",
      "Value": { "Fn::GetAtt": [ "EC2Instance", "PublicDnsName" ] }
    },
    "InstanceId": {
      "Description": "InstanceId",
      "Value": { "Ref": "EC2Instance" }
    }
  }
}
